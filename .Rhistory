ppois(45, lower.tail = FALSE)
ppois(9, lambda = 5, lower.tail = FALSE)
myplot(34)
myplot(33.3)
myplot(30)
myplot(28)
z <- qnorm(0.95)
z <- pnorm(30 + z, mean = 30, lower.tail = FALSE)
pnorm(30 + z, mean = 30, lower.tail = FALSE)
pnorm(30 + z, mean = 32, lower.tail = FALSE)
pnorm(30 + z, mean = 32, sd = 1, lower.tail = FALSE)
pnorm(30 + z * 2, mean = 32, sd = 2, lower.tail = FALSE)
t.test(n = 16, delta = 2 / 4, sd=1, type =
| "one.sample", alt = "one.sided")$power
t.test(n = 16, delta = 2 / 4, sd=1, type = "one.sample", alt = "one.sided")$power
t.test(n = 16, delta = 2 / 4, sd=1, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 2 / 4, sd=1, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 2, sd = 4, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 100, sd = 200, type = "one.sample", alt = "one.sided")$power
power.t.test(power = .8, delta = 2 / 4, sd=1, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 2, sd=4, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 100, sd=200, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, n = 26, sd=1, type = "one.sample", alt = "one.sided")$delta
power.t.test(power = .8, n = 27, sd=1, type = "one.sample", alt = "one.sided")$delta
head(pValues)
sum(pValues < 0.05)
sum(5)
sum(p.adjust(pValues,method="bonferroni") < 0.05)
sum(p.adjust(pValues,method="BH") < 0.05)
tail(trueStatus)
table(pValues2 < 0.05, trueStatus)
476/500
24/500
sum(p.adjust(pValues,method="bonferroni") < 0.05)
table(p.adjust(pValues2,method="bonferroni") < 0.05,
| trueStatus)
table(p.adjust(pValues2,method="bonferroni") < 0.05, trueStatus)
table(p.adjust(pValues2,method="BH") < 0.05, trueStatus)
5
sum(1\:6)/6
sum(1/:6)/6
sum(1:6)/6
print(g2)
head(sh)
length(sh)
nh
median(resampledMedians)
median(sh)
sample(fh, nh * 8)
sample(fh)
sam <- sample(fh,nh*B,replace=TRUE)
resam <- matrix(sam, B, nh)
meds <- apply(resam, median)
meds <- apply(resam, FUN = 'median')
meds <- apply(resam)
meds
5
meds <- apply(resam,1,median)
median(fh) - median(meds)
sd(meds)
sd(resampledMedians)
quantile(resampledMedians, c(0.025, 0.975))
quantile(meds, c(0.025, 0.975))
dim(InsectSprays)
names(InsectSprays)
range(Bdata$count)
range(Cdata$count)
BCcounts
group
testStat
obs <- testStat(BCcounts, group)
obs
mean(Bdata$count - Cdata$count)
sample(group)
perms <- sapply(1 : 10000, function(i) testStat(BCcounts, sample(group)))
mean(perms > obs)
testStat(DEcounts, group)
perms <- sapply(1 : 10000, function(i) testStat(DEcounts, sample(group)))
swirl()
install_from_swirl("Regression Models")
swirl()
install.packages('swirl')
library(swirl)
swirl()
install_from_swirl("Regression Models")
swirl()
lm(child ~ parent, dataset)
lm(child ~ parent, galton)
fit <- lm(child ~ parent, galton)
sqrt(sum(fit$residuals * fit$residuals)/(n - 2))
sqrt(sum(fit$residuals^2) / (n - 2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum((galton$child - mean(galton$child))^2)
sTot <- sum((galton$child - mu^2)
)
sTot <- sum((galton$child - mu)^2)
sTot <- sum((galton$child - mu)^2)
sRes <- deviance(fit)
sRes/sTot
1 - sRes/sTot
summary(fit)$r
summary(fit)$r.squared
cor(galton$child, galton$parent)
cor(galton$child, galton$parent)^2
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
head(trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
lm(Fertility ~ all, swiss)
lm(Fertility ~ ., swiss)
all <- lm(Fertility ~ ., swiss)
summary(all)
summary(lm(Fertility ~ agriculture, swiss))
summary(lm(Fertility ~ agriculture, swiss))
summary(lm(Fertility ~ Agriculture, swiss))
cor(swiss$Examination, swiss$Education)
cor(swiss$Agriculture, swiss$Education)
makelms()
ec <- sum(swiss$Examination + swiss$Catholic)
ec <- swiss$Examination + swiss$Catholic
efit <- lm(Fertility ~ . + ec, swiss)
all$coefficients - efit$coefficients
summary(InsectSparys)
summary(InsectSprays)
5
6
dim(InsectSprays)
head(InsectSprays, 15)
names(InsectSprays)
sB
summary(InsectSprays[:, 2])
summary(InsectSprays[: 2])
summary(InsectSprays[2])
summary(InsectSprays[, 2])
sapply(InsectSprays, class)
fit <- lm(count ~ spray, InsectSprays)
summary(fit)$coef
est <- summary(fit)$coef[, 1]
mean (sA)
mean(sprayB)
mean(sB)
nfit <- lm (count ~ spray - 1, InsectSprays)
summary(nfit)$coef
5
spray2 <- relevel(InsectSprays$spray, "C")
5
fit2 <- lm(count ~ spray2, InsectSprays)
fit2 <- lm(count ~ spray2, InsectSprays)
summary(fit2)$coef
mean(sC)
4
(fit$coef[2]-fit$coef[3])/1.6011
dim(hunger)
948
names(hunger)
fit <- lm(Numeric ~ Year, hunger)
summary(fit)$coef
4
lmF <- lm(hunger$Numeric[hunger$Sex=="Female"] ~ hunger$Year[hunger$Sex=="Female"])
lmM <- lm(hunger$Numeric[hunger$Sex=="male"] ~ hunger$Year[hunger$Sex=="male"])
lmM <- lm(hunger$Numeric[hunger$Sex=="Male"] ~ hunger$Year[hunger$Sex=="Male"])
lmBoth <- lm(Numeric ~ Year + Sex, hunger)
summary(lmBoth)
lmInter <- lm(Numeric ~ Year + Sex + Sex * Year, hunger)
summary(lmInter)$coef
summary(lmInter)
lambda = 0.2;
Num_Exponentials = 40;
Num_Simulations = 1000;
# Generate Exponential Distributions
Expo_Dist = matrix(rexp(Num_Simulations * Num_Exponentials, lambda), nrow = Num_Simulations);
dim(Expo_Dist)
mean (Expo_Dist)
sapply (Expo_Dist, mean)
sapply (Expo_Dist, 1, mean)
apply (Expo_Dist, 1, mean)
data.frame(Row_Mean_Expo_Dist)
lambda = 0.2;
Num_Exponentials = 40;
Num_Simulations = 1000;
# Generate Exponential Distributions
Expo_Dist = matrix(rexp(Num_Simulations * Num_Exponentials, lambda), nrow = Num_Simulations);
Row_Mean_Expo_Dist = apply(Expo_Dist, 1, mean);
# Hist of Mean
library(ggplot2)
Hist_Mean = ggplot(data.frame(Row_Mean_Expo_Dist))
Hist_Mean = Hist_Mean + geom_hist()
Hist_Mean = Hist_Mean + geom_histogram()
Hist_Mean
Row_Mean_Expo_Dist = data.frame(Row_Mean_Expo_Dist);
names(Row_Mean_Expo_Dist)
dim(Row_Mean_Expo_Dist)
Row_Mean_Expo_Dist = data.frame(Row_Mean_Expo_Dist);
Hist_Mean = ggplot(aes(x = Row_Mean_Expo_Dist), data = Row_Mean_Expo_Dist) + geom_histogram(binwidth = 30, color = 'black', fill = '#099DD9')
Hist_Mean
Hist_Mean = ggplot(aes(x = Row_Mean_Expo_Dist), data = Row_Mean_Expo_Dist) + geom_histogram(color = 'black', fill = '#099DD9')
Hist_Mean
Hist_Mean = ggplot(aes(x = Row_Mean_Expo_Dist), data = Row_Mean_Expo_Dist) + geom_histogram(color = 'black', fill = '#099DD9') + xlab('Mean') + ylab('Count')
Hist_Mean
Row_Mean_Expo_Dist
a = 1/0.2/sqrt(1000)
a
a * a
25/40
Hist_Mean
Hist_Mean = Hist_Mean + ggplot()
?rnorm
pnorm(rep(0, 1, 1000))
?rep
rep(0:1, len = 1000)
sep(0:1, len = 1000)
seq(0, 1, len = 1000)
Normal_Dist = data.frame(sep(0, 1, 1000), pnrom(sep(0, 1, 1000)))
Normal_Dist = data.frame(seq(0, 1, 1000), pnrom(seq(0, 1, 1000)))
Normal_Dist = data.frame(seq(0, 1, 1000), pnorm(seq(0, 1, 1000)))
names(Normal_Dist)
Normal_Dist = data.frame(seq(0, 1, 1000), pnorm(seq(0, 1, 1000)))
names(Normal_Dist) = c('x', 'y')
a = ggplot(aes(x = x, y = y), Normal_Dist)
Normal_Dist
seq(0, 1, 1000)
Normal_Dist = data.frame(seq(0, 1, len = 1000), pnorm(seq(0, 1, len = 1000)))
names(Normal_Dist) = c('x', 'y')
Normal_Dist
Normal_Dist = data.frame(seq(0, 10, len = 10000), pnorm(seq(0, 10, len = 1000)), mean = mu, sd = sqrt(Theoretical_Var))
names(Normal_Dist) = c('x', 'y')
Normal_Dist = data.frame(seq(0, 10, len = 10000), pnorm(seq(0, 10, len = 1000)), mean = mu, sd = sqrt(0.625))
names(Normal_Dist) = c('x', 'y')
head(Normal_Dist)
seq(0, 10, len = 10)
Normal_Dist = data.frame(seq(0, 10, len = 10000), pnorm(seq(0, 10, len = 1000)), mean = mu, sd = sqrt(0.625))
Normal_Dist
names(Normal_Dist)
head(Noraml_Dist)
head(Normal_Dist)
Normal_Dist = data.frame(seq(0, 10, len = 10000), pnorm(seq(0, 10, len = 1000), mean = mu, sd = sqrt(0.625)))
head(Normal_Dist)
?pnorm
Normal_Dist = data.frame(seq(0, 10, len = 10000), dnorm(seq(0, 10, len = 1000), mean = mu, sd = sqrt(0.625)))
head(Normal_Dist)
dnorm(0)
pnorm(0)
pnorm(-10)
pnorm(-100)
dnorm(-10)
c(-1, 1, len = 10)
seq(0, 1, len = 3)
dnorm(seq(0, 1, len = 3))
dnorm(seq(0, 1, len = 3))Normal_Dist = data.frame(seq(0, 10, len = 10000), dnorm(seq(0, 10, len = 10000), mean = mu, sd = sqrt(1)))
Normal_Dist = data.frame(seq(0, 10, len = 10000), dnorm(seq(0, 10, len = 10000), mean = mu, sd = sqrt(1)))
head(Normal_Dist)
dim(seq(0, 10, len = 10000))
seq(0, 10, len = 10000)
dnorm(seq(0, 10, len = 10000), mean = mu, sd = sqrt(0.625))
mu
mu = 5
dnorm(seq(0, 10, len = 10000), mean = mu, sd = sqrt(Theoretical_Var))
dnorm(seq(0, 10, len = 10000), mean = mu, sd = sqrt(0.625))
A = seq(0, 10, len = 10000);
B = dnorm(A, mean = 5, sd = sqrt(0.625));
C = data.frame(A, B)
C
names(C) = c('x', 'y')
head(C)
D = ggplot(aes(x = x, y = y), C)
D = ggplot(aes(x = x, y = y), data = C)
D
D = D + geom_line()
D
Norm_Dist = data.frame(seq(0, 10, len = 1000), dnorm(seq(0, 10, 1000), mean = mu, sd = sqrt(Theoretical_Var)))
names(Norm_Dist) = c('x', 'y')
Norm_Dist = data.frame(seq(0, 10, len = 1000), dnorm(seq(0, 10, 1000), mean = mu, sd = sqrt(0.625)))
names(Norm_Dist) = c('x', 'y')
Dist_Mean = ggplot(aes(x = x, y = y), data = Norm_Dist) + geom_line()
Dist_Mean
head(Norm_Dist)
Norm_Dist = data.frame(seq(0, 10, len = 1000), dnorm(seq(0, 10, 1000), mean = mu, sd = sqrt(Theoretical_Var)))
names(Norm_Dist) = c('x', 'y')
Theoretical_Var = 0.625
Norm_Dist = data.frame(seq(0, 10, len = 1000), dnorm(seq(0, 10, 1000), mean = mu, sd = sqrt(Theoretical_Var)))
names(Norm_Dist) = c('x', 'y')
A = qplot(x = x, y = y, data = Norm_Dist)
A
mu
qplot(x, y, data = Norm_Dist)
range(y)
range(Norm_Dist$y)
x = seq(0, 10, len = 1000)
y = dnorm(x, mean = mu, sd = sqrt(Theoretical_Var))
Norm_Dist = data.frame(x, y)
head(Norm_Dist)
range(Norm_Dist$x)
range(Norm_Dist$y)
library(datasets)
data(ToothGrowth)
names(ToothGrowth)
summary(ToothGrowth)
head(ToothGrowth)
ToothGrowth
ToothGrowth[supp = 'VC', dose = 0.5]
ToothGrowth[dose = 0.5]
ToothGrowth[dose == 0.5]
ToothGrowth$dose == 0.5
ToothGrowth[ToothGrowth$dose == 0.5]
subset(ToothGrowth, dose == 0.5)
supp_does05
supp_dose05 = t.test(len ~ supp, data = subset(ToothGrowth, dose = 0.5), var.equal = FALSE)
supp_dose1 = t.test(len ~ supp, data = subset(ToothGrowth, dose = 1), var.equal = FALSE)
supp_dose2 = t.test(len ~ supp, data = subset(ToothGrowth, dose = 2), var.equal = FALSE)
supp_does05
supp_dose05
c(c(1, 1), c(2, 2), c(3, 3))
subset(ToothGrowth, supp = 'VC' && dose != 2.0)
subset(ToothGrowth, supp == 'VC' && dose != 2.0)
subset(ToothGrowth, supp == 'VC' && (dose == 0.5 || dose = 1.0))
subset(ToothGrowth, supp == 'VC')
subset(ToothGrowth, supp == 'VC' & dose = 0.5)
subset(ToothGrowth, supp == 'VC' & dose == 0.5)
subset(ToothGrowth, supp == 'VC' & dose in c(0.5, 1.0))
subset(ToothGrowth, supp == 'VC' & dose == 0.5 or 1.0)
subset(ToothGrowth, supp == 'VC' & dose == 0.5 |dose =  1.0)
subset(ToothGrowth, supp == 'VC' & dose == 0.5 |dose == 1.0)
subset(ToothGrowth, supp == 'VC' & (dose == 0.5 |dose == 1.0))
install.packages('bunzip2')
data(mtcars)
names(mtcars)
fit = lm(mpg ~ cyl + wt, data = mtcars)
fit
fit$coef
fit$coef[2]
fit$coef[2] * 4
summary(fit)$coef
summary(fit)$coef[3, 1]
fit = lm(mpg ~ factor(cyl) + wt, data = mtcars)
fit
fit = lm(mpg ~ factor(cyl), data = mtcars)
fit
fit = lm(mpg ~ factor(cyl) + wt, data = mtcars)
fit2 = lm(mpg ~ factor(cyl) * wt, data = mtcars)
fit
fit2
summary(fit2)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit = lm(y ~ x)
hatvalues(fit)
dfbeta(fit)
influence.measures(fit)
influence.measures(fit)$coef
influence.measures(fit)$infmat
influence.measures(fit)$infmat[5, 2]
2285-2266
library(mass)
library(MASS)
data(shuttle)
head(shuttle)
lr = lm(use ~ wind, data = shuttle, family = "binomial")
lr
shuttle$use = as.numeric(shuttle$use == 'auto')
shuttle$use
shuttle$wind = as.factor(shuttle$wind)
lr = lm(use ~ wind, data = shuttle, family = "binomial")
lr = lm(use ~ wind, data = shuttle, family = 'binomial')
lr = glm(use ~ wind, data = shuttle, family = 'binomial')
lr
shuttle$magn = as.factor(shuttle$magn)
lr = glm(use ~ wind + magn - 1, data = shuttle, family = 'binomial')
lr
library(MASS)
data(shuttle)
# convert outcome to 0 = noauto, 1 = auto
shuttle$use <- factor(shuttle$use, levels = c("auto", "noauto"), labels = c(1, 0))
fit1 <- glm(use ~ wind - 1, data = shuttle, family = "binomial")
summary(fit)
windhead <- fit1$coef[1]
windtail <- fit1$coef[2]
exp(windtail)/exp(windhead)
lr = lm(use ~ magn - 1, data = shuttle, family = "binomial")
lr = glm(use ~ magn - 1, data = shuttle, family = "binomial")
lr
summary(lr)
library(MASS)
data(shuttle)
head(shuttle)
shuttle$use = as.numeric(shuttle$use == 'auto')
shuttle$magn = as.factor(shuttle$magn)
lr = glm(use ~ magn - 1, data = shuttle, family = 'binomial')
summary(lr)
lr$coef
head(shuttle)
data(shuttle)
shuttle$use = as.numeric(shuttle$use == 'auto')
lr = glm(use ~ magn - 1, data = shuttle, family = 'binomial')
lr
shuttle
library(MASS)
data(shuttle)
# convert outcome to 0 = noauto, 1 = auto
shuttle$use <- factor(shuttle$use, levels = c("auto", "noauto"), labels = c(1, 0))
# Question 2
# Consider the previous problem. Give the estimated odds ratio for autoloader
# use comparing head winds (numerator) to tail winds (denominator) adjusting for
# wind strength from the variable magn.
fit2 <- glm(use ~ wind + magn - 1, data = shuttle, family = "binomial")
summary(fit)
windhead2 <- fit2$coef[1]
windtail2 <- fit2$coef[2]
exp(windtail2)/exp(windhead2)
exp(windtail2)/exp(windhead2)
fit2$coef
data(InspectSprays)
data(InsectSprays)
head(InsectSprays)
IS$spray = as.factor(IS$spray)
IS = InsectSprays
IS$spray = as.factor(IS$spray)
IS
pr = glm(count ~ spray, data = IS, family = 'poisson')
summray(pr)
summary(pr)
exp(0.05588)
pr$coef
pr$coef[1]
pr$coef[2]
pr = glm(count ~ spray - 1, data = IS, family = 'poisson')
pr$coef
exp(pr$coef[1])/exp(pr$coef[2])
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knots<-c(0)
splineTerms<-sapply(knots, function(knot)(x > knot)*(x - knot))
xMat<-cbind(1,x,splineTerms)
linearModel <- lm(y~xMat-1)
yhat<-predict(linearModel)
plot(x,y,frame=FALSE,pch=21,bg="lightblue",cex=2)
lines(x,yhat,col="red",lwd=2)
xMat
linearModel
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knots<-c(0)
splineTerms<-sapply(knots, function(knot)(x > knot)*(x - knot))
xMat<-cbind(1,x,splineTerms)
linearModel <- lm(y~xMat-1)
yhat<-predict(linearModel)
plot(x,y,frame=FALSE,pch=21,bg="lightblue",cex=2)
lines(x,yhat,col="red",lwd=2)
linearModel$coef
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
lhs <- function(x) ifelse(x < 0,0-x,0) # basis function 1 (lhs = left hockey stick)
rhs <- function(x) ifelse(x > 0,x-0,0) # basis function 2 (rhs = right hockey stick)
gb <- lm(y ~ lhs(x) + rhs(x))
x <- seq(-5,5,by=1)
py <- gb$coef[1]+gb$coef[2]*lhs(x)+gb$coef[3]*rhs(x)
lines(x, py)
py
gb$coef
lhs(x)
rhs(x)
library(swirl)
swirl()
fit <- lm(y ~ x, out2)
plot(fit, which=1)
fitno <- lm(y ~ x, out2)
fitno <- lm(y ~ x, out2[-1, ])
a = rnorm(3)
plot(fitno, which=1)
coef(fit) - coef(fitno)
head(dfbeta(fit))
resno <- out2[1, "y"] - predict(fitno, out2[1,])
1-resid(fit)[1]/resno
View(hatvalues(fit))
sigma <- sum(x)
sigma <- sqrt(deviance(fit)/df.residual(fit))
rsd
rstd = 1
rstd <- resid(fit)/(sigma * sqrt(1-hatvalues(fit)))
head(cbind(rstd, rstandard(fit)))
plot(fit, which=3)
plot(fit, which=2)
sigam1 = 1
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
resid(fit)[1]/(sigma1 * sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
dy = predict(fitno, out2) - predict(fit, out2)
2
sum(dy^2)/(2*sigma^2)
plot(fit, which=5)
rgp1()
rpg2()
rgp2()
head(swiss)
mdl <- 1
swirl()
swirl()
swirl()
source('~/Desktop/Kaggle_Springleaf_Marketing_Response/xgboost_2.R')
setwd("~/Desktop/Kaggle_Springleaf_Marketing_Response")
source('~/Desktop/Kaggle_Springleaf_Marketing_Response/xgboost_2.R')
source('~/Desktop/Kaggle_Springleaf_Marketing_Response/xgboost_2.R')
source('~/Desktop/Kaggle_Springleaf_Marketing_Response/xgboost_2.R')
